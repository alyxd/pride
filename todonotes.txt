Currently working on:


To Do/Bugs
=====

- post processing queue and end of frame queue
    - rename postdraw to end of frame
    - add list of instructions to be performed after all other drawing is done

- need confirmation of some sort before acting on selected object in File_Saver
    - clicking on it once should allow the user to examine it before committing to it

- create command line shell using Forms
- create messenger using Forms and Data Transfer Service

- Lockscreen needs register button sorted out
    - user2 doesn't have a register method...
    - currently using auto_register, but having a "register" button seems more friendly

Form stuff
----------
- add arrow key support for text fields
- hide/show bugs when switching tabs in game and closing theme customizer
    - refactor tabs to use Forms and see if it is still an issue
- implement lazy loading of rows in Form
- update Form max_rows on area change
    - when more space is available, more rows can be displayed
- balance on Forms probably still needs testing


- mouse click animation looks dark/opaque when clicking on empty space in container with buttons

- refactor text rendering to use an atlas
    - current basic text rendering solution is very inefficient
    - disproportionate amount of time is spent rendering text relative to other draw operations


- Text-to-Speech for tip_bar_text?
- theme_profile ideas/guidelines
    - make interactive components light and non-interactive components dark (or vice versa)
    - make text colors on interactive components different than text colors on non-interactive components
- Sound effects?
    - very subtle/soft sound on_hover/click/etc


-  rounded rectangles
    - sdlgfx functions automatically set blendmode
        - also fails to restore blendmode after setting it
    - will have to use a modified version of sdl2gfx to use rounded rectangles
        - simply remove the SDL_SetRenderDrawBlendMode calls
    - alternatively, replace SDL_Renderer with OpenGL


- Homescreen: Closing Theme_Customizer leaves a dead empty tab open



Make identicons
===============
- use for automatically generated icons, whenever icons are necessary
    - e.g. for programs listed in the Home_Screen
- Color palette: white, black, orange, blue
    - red and green are always kept at equal levels
        - minimize accessibility issues with a common form of color blindness
    - color information provides a maximum of 32 bits of information (for 8-bit rgba)
        - not achieved in practice, because colors that are close to each other are indistinguishable by human eyes
        - increments of 16 appear to be reasonably distinguishable
            - 16 = 2^4 possible values per each rgba color value
            - 2^4 * 2^4 * 2^4 * 2^4 = 16 bits of information are conveyed by color information
- Divide area into NxN grid
    - KxN grid could enable having square/"long"/"tall" icons, another feature enabling identification
    - NxN is simple to identify as an icon, reason about, and implement
        - knowing an icon is a square can help identify it
    - alternative: split grid randomly by bisection

- For each cell in the grid, draw a shape of a given color in the cell
    - Shapes:
        - filled rectangle
        - lines?
            - horizontal, vertical, diagonal, other diagonal
- Try to arrange for some symmetry to be present?

- Use bits of hash value to make decision on what operation to apply to icon area
    - for each 4 bits of hash value,
                                        # bit number
           draw shape/color flag        # 0
           split vertical flag          # 1
           split horizontal flag        # 2
    - if the 0 bit is set, then draw the shape/color to the current area
    - if the 1 bit is set, then the area is divided into two left and right regions

    Define "Symmetry"
    -----------------
    - if pattern a is a translation or rotation of pattern b, then pattern a and b are different representations of the same pattern
    - generate all symmetries for an NxN grid:
        - assume the only possible configuration of a cell is a solid fill of color1 or color2



- use constants to denote different common h_range/w_range values

    THIN = (0, .10)



Refactor gui package
--------------------
- refactor pride.gui.gui.Window_Object into different objects with separate responsibilities
    - already started in the form of the Organized_Object class
- refactor widgetlibrary into .widgets package
- move any programs into the .programs package
- remove all deprecated and/or unused+untested code



Homescreen
----------
- set up homescreen
- set up application launcher
    - /usr/share/applications/
- set up system shell
- set up python shell
- set up file explorer
    - right click menu should contain open-file-explorer-here-as-root option
- location of tab bar should be customizable

        ---------- tab bar -----------------------------------------------------
        | Menu | open applications | shortcuts | notifications | date/time|    |
        ------------------------------------------------------------------------
        |                                                                      |
        |                                                                      |
        |                                                                      |
        |                                                                      |
        |                  application area                                    |
        |                                                                      |
        |                                                                      |
        |                                                                      |
        |                                                                      |
        |                                                                      |
        |                                                                      |
        |                                                                      |
        |                                                                      |
        ------------------------------------------------------------------------


- Menu:

        |--------------------------------------------------------------------|
        |            ?                                   |log out|sleep|power|
        |--------------------------------------------------------------------|
        | links to the      |      shortcuts to      |      shortcuts to     |
        | most frequently   |      most frequently   |      settings         |
        | used programs     |      used data         |                       |
        |                   |                        |                       |
        |                   |                        |                       |
        |                   |                        |                       |
        |                   |                        |                       |
        |--------------------------------------------------------------------|
        | Menu |   open applications | shortcuts | notifications | date/time |
        ---------------------------------------------------------------------|

Security issues
===============

- use a random salt in user2.User.derive_master_keys

Make  `encrypt` use a per-message key
-------------------------------------
- Can use randomly generated nonce with effectively no concerns regarding size and collisions
    - Current behavior uses randomly-generated nonces with GCM mode, which is risky

Ensure cryptogram header is flexible to support updates to algorithms
---------------------------------------------------------------------
- Could be as simple as a unit test for existing code
- Could mean re-writing existing code

Properly define different data types (in transit, at rest, in-program, etc) and how encryption should be used with them
-----------------------------------------------------------------------------------------------------------------------
- Currently, the User component and Encryption_Service can both perform encryption
    - Which one should be used when?
- The File_System component supports encryption
    - When should it be used?

Set up tls properly
-------------------
- Self-signed certificates currently providing little security
- Ensure that the default configuration is secure

deal with certificates properly
-------------------------------
- ...

Have a clearly defined user model
---------------------------------



full screen toggle, resolution sliders
--------------------------------------
- started: windowoptions


make proper file selector with directory viewer
-----------------------------------------------
- different views (details, tiles)
- clicking on filename opens detailed information about the file
- display current directory
- change current directory
    - back/forward buttons, up button
    - address bar
- started: fileexplorer


optimize render
---------------
- cache every x layers
    - saves multiplicative factor
    - only useful when there are a large number of layers
- batch draw rects of the same color and depth
    - needs to respect order that draw instructions were arranged
    - not clear that grouping instructions by type would meaningfully improve performance
- when re-drawing an object, check to see if another object with that size and profile has been drawn
- give each window object a texture to cache the result of its drawing
    - can share textures from objects of the same size, theme, and theme profile
    - useful when there are large numbers of the same shape
    - a per object texture will be prohibitively expensive unless most objects are identical
- don't draw occluded objects
    - because of alpha blending the occlusion is only partial
    - not drawing the occluded object would change the displayed result
- if a window object creates a child and that child does not have limited size, then the window object is occluded
    - see above
- optimize organizer to use CPU_COUNT processes to do the work
    - could use threads, but python threads make things slower rather than faster
    - could use processes, but then there is no shared state and data needs to be sent back and forth
        - only useful for very large tasks
    - does cython offer a usable and worthwhile threading solution?
- fuse organization and re-draw loop?
    - handle_area_change can perform re-draw
- memoize SDL_Renderer.draw_text
    - should be easy performance gain without having to implement the texture atlas
- invalidate texture and text separately
    - frequently it will be the case that an items text will change while the rest remains the same
    - could split invalidation into two tiers, one that invalidates everything, and another that redraws only the text




2d slider pad
-------------
- useful for e.g. changing position


Tip Bar
-------
- set timeout on tip bar text?
- implement colors in tip bar text?



indicate unusable buttons as being unusable (e.g. grey-out)
-----------------------------------------------------------
- fade-out effects for hide/show
- hide/show buttons
    - mouseover to left/right/top/bottom to see hide/show buttons


theme designer applet
---------------------
- visual programming app to make designing themes easy


improve auto-documentation (pride.components.package)
-----------------------------------------------------
- how?


add api file + start using versionhelper
----------------------------------------
- separate gui into separate package due to different levels of stability




Ideas
=====

post-initializer inheritance
----------------------------
- append each post-initializer into a list
- call them all in succession


auto remove Base objects from lists (or containers)
---------------------------------------------------
- add_to method that adds a Base object to a list
- #self.append_to(list)
- #   keeps a handle on list
-   on delete, removes `self` from list


Software install module
-----------------------

def install_packages(install_script)
    if pride.components.shell.get_permission(prompt):
        os.system(install_script)

Notes
=====

RPC acted weird on first run, then worked fine?
-----------------------------------------------
- reproducible: ?


Known Issues
============

encryptedstorage does not have OS provided encryption on linux
--------------------------------------------------------------
- there is no equivalent on linux
- just switch providers if using linux
